`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 16.04.2019 22:44:54
// Design Name: 
// Module Name: TopBasys
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


   module TopBasys(input clk,input clk_input,input reset_input,input hard_reset,
output [3:0] AN,
 output [6:0] C,
 output StallD,
 output StallF
);
 logic[31:0] writedata, dataadr,pc,instr, PCF,aluout, resultW,instrOut, WriteDataM;
 logic clk_pulse,reset_pulse,clear,DP,memwrite;
 logic [3:0] digit3, digit2, digit1, digit0;
   
top top( clk_pulse, reset_pulse,                    
         memwrite,
         instr,
           PCF,
           aluout, resultW,
                   instrOut, WriteDataM,
                  StallD, StallF);

pulse_controller pulse(clk, clk_input,hard_reset,clk_pulse);
pulse_controller pulse2(clk, reset_input,hard_reset,reset_pulse);

//assign digit3 = resultW[7:3];
// assign digit2 = resultW[3:0];
assign digit1 = aluout[7:3];
assign digit0 = aluout[3:0];  
assign digit3 = PCF[7:3];
 assign digit2 = PCF[3:0];  

display_controller cont(clk,hard_reset,4'b1111,digit3,digit2,digit1,digit0,AN,C,DP);
endmodule
module top  (input   logic 	 clk, reset,                      
	     output  logic memwrite,
	     output logic [31:0]  instr,
	      output logic[31:0]  PCF,
	       output logic[31:0]  aluout, resultW,
                      output logic[31:0]  instrOut, WriteDataM,
                      output logic StallD, StallF);  
   logic [31:0] readdata;     
   mips mips ( clk, reset,PCF, instr,aluout, resultW,instrOut, WriteDataM,StallD, StallF); 
   imem imem (PCF[7:2], instr);  
   dmem mem(clk,memwrite,aluout,WriteDataM,readdata);
  
endmodule
module mips (input  logic        clk, reset,
             output logic[31:0]  PCF,
             input  logic[31:0]  instr,
             output logic[31:0]  ALUOut, resultW,
             output logic[31:0]  instrOut, WriteDataM,
             output logic StallD, StallF);

 // ********************************************************************
                 // You can change the logics below but if you didn't change the signitures of 
                 // above modules you will need these.
                 // ********************************************************************
             
                 logic MemtoReg, MemWrite,AluSrc, RegDst, RegWrite;
                 logic memtoreg, zero, alusrc, regdst, regwrite, jump, PCSrcM, branch, memwrite,pcsrc;
                 logic [31:0] PCPlus4F, PCm, PCBranchM, instrD;
                 logic [31:0] state;
                 logic [2:0] alucontrol;
                 assign instrOut = instr;
                 logic RegWriteD, MemtoRegD, MemWriteD;
                 logic [2:0]  alucontrolD;
                 logic AluSrcD, RegDstD, BranchD;
                 logic[31:0]  ResultW;
                 logic no;
                 // ********************************************************************
                 // Below, instantiate a controller and a datapath with their new (if modified) 
                 // signatures and corresponding connections.
                 // Also, you might want to instantiate PipeWtoF and pcsrcmux here.
                 // Note that this is not the only solution.
                 // You can do it in your way as long as it works.
                 // ********************************************************************
controller c ({instrD[31],instrD[30],instrD[29],instrD[28],instrD[27],instrD[26]},{instrD[5],instrD[4],instrD[3],instrD[2],instrD[1],instrD[0]},MemtoReg, MemWrite,AluSrc, RegDst, RegWrite, jump, alucontrol,branch);

datapath dp( clk, reset,
                PCF, instr,	
                 RegWrite, MemtoReg, MemWrite,
           alucontrol,  AluSrc, RegDst, branch,
           PCSrcM, 
           StallD, 
           StallF,
           PCBranchM, 
           PCPlus4F, instrD, ALUOut,
            ResultW, WriteDataM);

mux2 #(32)mux( PCPlus4F,PCBranchM,PCSrcM,state);
assign no= ~StallF;
PipeWtoF wf(state,no,clk,reset,PCF);


                
endmodule
    module datapath (input  logic clk, reset,
                     input logic [31:0] PCF, instr,	
                     input logic RegWriteD, MemtoRegD, MemWriteD,
                     input logic [2:0] ALUControlD,
                     input logic AluSrcD, RegDstD, BranchD,
                         output logic PCSrcM, StallD, StallF,
                         output logic[31:0] PCBranchM, PCPlus4F, instrD, ALUOut, ResultW, WriteDataM); 
    
        // ********************************************************************
        // Here, define the wires (logics) that are needed inside this pipelined datapath module
            // You are given the wires connecting the Hazard Unit.
           // Notice that StallD and StallF are given as output for debugging
   
      
    
            logic RegWriteE, MemtoRegE, MemWriteE;
            logic[2:0] AluControlE;
            logic AluSrcE, RegDstE, BranchE;
            logic[31:0] RD1E, RD2E;
            logic[4:0] RsE, RtE, RdE;
            logic[31:0] SignImmE;
            logic[31:0] PCPlus4E;
             logic[31:0] PCPlus4D,RD1D, RD2D;
        logic RegWriteM, MemtoRegM, MemWriteM, BranchM, ZeroM;
            logic[31:0] ALUOutM;
            logic[4:0] WriteRegM;
            logic RegWriteW, MemtoRegW;
            logic[31:0] ReadDataW, ALUOutW;
            logic[4:0] WriteRegW;
             logic[4:0] RsD, RtD, RdD;
           logic [31:0] SignImmD;
           logic Zero;
           logic [31:0] ReadDataM,WriteDataE,PCBranchE,SrcAE,SrcBE;
           logic [4:0] WriteRegE;
           logic [31:0] signImETemp;
        // ********************************************************************
    
        logic ForwardAD, ForwardBD,FlushE,FlushM,FlushD;
        logic [1:0] ForwardAE, ForwardBE;		
        // Add necessary wires (logics).
        assign RsD =   instrD[25:21];
        assign RtD =   instrD[20:16];
        assign RdD =   instrD[15:11];
        assign PCSrcM =  BranchM & ZeroM;
                
        //  (1) Adder that adds 4 to PC        
        adder    pcBranchMadder(PCF, 32'b100, PCPlus4F);
        //  (2) Shifter that shifts SignImmE to left by 2
        sl2 shifter(SignImmE,signImETemp); 
        //  (3) Sign extender and Register file
         signext   se (instrD[15:0], SignImmD);	
         regfile rf (clk, RegWriteW, instrD[25:21], instrD[20:16],
                     WriteRegW, ResultW, RD1D, RD2D); 
        // (4) PipeFtoD
        PipeFtoD ftd(instr, PCPlus4F, ~StallD, clk, reset|FlushD, instrD, PCPlus4D); 
        //  (5) PipeDtoE and ALU
        PipeDtoE fde(  FlushE, clk, reset, RegWriteD, MemtoRegD, MemWriteD,ALUControlD,AluSrcD, 
        RegDstD, BranchD, RD1D, RD2D, RsD, RtD,
               RdD,SignImmD,PCPlus4D,RegWriteE, MemtoRegE, MemWriteE,AluControlE,AluSrcE, RegDstE,
            BranchE,RD1E, RD2E,RsE, RtE, RdE,SignImmE,PCPlus4E);
            
            
             alu    aluR (SrcAE, SrcBE, AluControlE, ALUOut, Zero,reset);
      //  (5) Adder for PCBranchM
      adder pcMAdder(signImETemp,PCPlus4E,PCBranchE);
     //  (6) PipeEtoM and Data Memory
     PipeEtoM em(clk, reset|FlushM, RegWriteE, MemtoRegE, MemWriteE, BranchE, Zero,ALUOut,
     WriteDataE,WriteRegE,PCBranchE,RegWriteM, MemtoRegM, MemWriteM, BranchM, ZeroM,
     ALUOutM,WriteDataM,WriteRegM,PCBranchM);
    //  dmem mem(clk,MemWriteM,ALUOutM,WriteDataM,ReadDataM);
     //  (7) PipeMtoW
     PipeMtoW fmw(clk, reset, RegWriteM, MemtoRegM, ReadDataM, ALUOutM,
     WriteRegM,RegWriteW, MemtoRegW,ReadDataW, ALUOutW,WriteRegW);
     //  (8) Many muxes 
     mux4 #(32) srcAmux(RD1E,ResultW,ALUOutM,0,ForwardAE,SrcAE);
     mux4 #(32) dataEMux(RD2E,ResultW,ALUOutM,0,ForwardBE,WriteDataE);
     mux2 #(32) srcBmux(WriteDataE,SignImmE,AluSrcE,SrcBE);
     mux2 #(32) resultMux(ALUOutW,ReadDataW,MemtoRegW,ResultW);
     mux2 #(5) writeRegEMux(RtE,RdE,RegDstE,WriteRegE);
     //  (9) Hazard unit 
  HazardUnit haz( RegWriteW,WriteRegW, RegWriteM,MemtoRegM,
                   WriteRegM,
                    RegWriteE,MemtoRegE,
                    RsE,RtE,
                     RsD,RtD,
                    PCSrcM, ForwardAE,ForwardBE,
                    FlushE,StallD,StallF,FlushM,FlushD);
    endmodule

module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clk, reset,		// StallD will be connected as this EN
                output logic[31:0] instrD, PcPlus4D);
    
    always_ff @(posedge clk, posedge reset)begin
        if (reset)begin
            instrD <= 0;
            PcPlus4D <= 0;
        end
        else if(EN)
            begin
            instrD<=instr;
            PcPlus4D<=PcPlus4F;
            end
        else begin
            instrD <= instrD;
            PcPlus4D <= PcPlus4D;
        end
    end
endmodule
module PipeDtoE(input logic clr, clk, reset, RegWriteD, MemtoRegD, MemWriteD,
                input logic[2:0] AluControlD,
                input logic AluSrcD, RegDstD, BranchD,
                input logic[31:0] RD1D, RD2D,
                input logic[4:0] RsD, RtD, RdD,
                input logic[31:0] SignImmD,
                input logic[31:0] PCPlus4D,
                    output logic RegWriteE, MemtoRegE, MemWriteE,
                    output logic[2:0] AluControlE,
                    output logic AluSrcE, RegDstE, BranchE,
                    output logic[31:0] RD1E, RD2E,
                    output logic[4:0] RsE, RtE, RdE,
                    output logic[31:0] SignImmE,
                    output logic[31:0] PCPlus4E);

    always_ff @(posedge clk, posedge reset)begin
 // ******************************************************************************
       if(reset | clr)begin
	RegWriteE <= 0;
        MemtoRegE <= 0;
        MemWriteE <= 0;
        AluControlE <= 2'b00;
	AluSrcE <=0;
	RegDstE <=0;
	BranchE <=0;
    RD1E <= 0;
	RD2E<=0;
	RsE <=0;
	RtE <= 0;
	RdE <= 0;
	PCPlus4E <= 0;
	SignImmE <= 0;
        end
	else
	begin
        RegWriteE <=  RegWriteD;               
        MemtoRegE <= MemtoRegD;
        MemWriteE <=  MemWriteD;
        AluControlE <= AluControlD;
	AluSrcE <= AluSrcD;
	RegDstE <= RegDstD;
	BranchE <= BranchD;
        RD1E <= RD1D;
	RD2E <= RD2D;
	RsE <= RsD;
	RtE <= RtD;
	RdE <= RdD;
	PCPlus4E <= PCPlus4D;
	SignImmE <= SignImmD;
  //****************************************
	end
    end
endmodule
module PipeEtoM(input logic clk, reset, RegWriteE, MemtoRegE, MemWriteE, BranchE, Zero,
                input logic[31:0] ALUOut,
                input logic [31:0] WriteDataE,
                input logic[4:0] WriteRegE,
                input logic[31:0] PCBranchE,
                    output logic RegWriteM, MemtoRegM, MemWriteM, BranchM, ZeroM,
                    output logic[31:0] ALUOutM,
                    output logic [31:0] WriteDataM,
                    output logic[4:0] WriteRegM,
                    output logic[31:0] PCBranchM);
     // ******************************************************************************
    always_ff @(posedge clk, posedge reset) begin
    if(reset == 1)
    begin
    RegWriteM <= 0;
    MemWriteM <= 0;
    BranchM <= 0;
    ZeroM <= 0;
    ALUOutM <= 0;
    WriteDataM <= 0;
    WriteRegM <= 0;
    PCBranchM <= 0;
    MemtoRegM <= 0;
    end
    else
    begin
    RegWriteM <= RegWriteE;
    MemWriteM <= MemtoRegE;
 	BranchM <= BranchE;
	ZeroM <= Zero;
	ALUOutM <= ALUOut;
	WriteDataM <= WriteDataE;
	WriteRegM <= WriteRegE;
	PCBranchM <= PCBranchE;
	MemtoRegM <= MemtoRegE;
	end
 // ******************************************************************************

    end
endmodule
module PipeMtoW(input logic clk, reset, RegWriteM, MemtoRegM,
                input logic[31:0] ReadDataM, ALUOutM,
                input logic[4:0] WriteRegM,
                    output logic RegWriteW, MemtoRegW,
                    output logic[31:0] ReadDataW, ALUOutW,
                    output logic[4:0] WriteRegW);

		always_ff @(posedge clk, posedge reset) begin
            // ******************************************************************************
		if(reset)
		begin
		RegWriteW <= 0;
		ReadDataW <= 0;
        MemtoRegW <= 0;
 		ALUOutW <=   0;
 		WriteRegW <= 0;
 		end
		else
		begin
		RegWriteW <= RegWriteM;
		ReadDataW <= ReadDataM;
        MemtoRegW <= MemtoRegM;
 		ALUOutW <= ALUOutM;
 		WriteRegW <= WriteRegM;
		end
 		
            // ******************************************************************************
        end
endmodule
module HazardUnit( input logic RegWriteW,
                input logic [4:0] WriteRegW,
                input logic RegWriteM,MemToRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE,MemtoRegE,
                input logic [4:0] rsE,rtE,
                input logic [4:0] rsD,rtD,
                input logic [31:0] PcSrcM,
                output logic [1:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF,FlushM,FlushD);
   
    logic lwstall;
    always_comb begin
    
        // ********************************************************************
       
      if ((rsE != 0) && (rsE == WriteRegM) && RegWriteM)
          ForwardAE = 10;
         else if ((rsE != 0) && (rsE == WriteRegW) && RegWriteW) 
          ForwardAE = 01;
         else ForwardAE = 00;
      
         if ((rtE != 0) && (rtE == WriteRegM) && RegWriteM)
           ForwardBE = 10;
         else if ((rtE != 0) && (rtE == WriteRegW) && RegWriteW && (PcSrcM != 1)) 
           ForwardBE = 01;
        else ForwardBE = 00;
      
       lwstall = ((rsD == rtE) || (rtD == rtE)) && MemtoRegE ;
     StallF = lwstall;
     StallD = lwstall;
     FlushE = lwstall;
     
      if( PcSrcM == 1)
            begin
            FlushE = 1;
            FlushD = 1;
            FlushM = 1;
            end
      else
      begin
      FlushD = 0;
      FlushM = 0;
      end

        // ********************************************************************
    
    end

endmodule
// 
// Create Date: 04.04.2019 01:09:15
// Design Name: 
// Module Name: testbench
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module testbench(

    );
    logic 	 clk, reset;         
    logic[31:0] writedata, dataadr;            
    logic memwrite;
    logic [31:0]  instr;
     logic[31:0]  PCF;
     logic[31:0]  aluout, resultW;
      logic[31:0]  instrOut, WriteDataM;
      logic StallD, StallF;  

   

top top( clk, reset,                   
	   memwrite,
	       instr,
	   PCF,
	         aluout, resultW,
                     instrOut, WriteDataM,
                      StallD, StallF);
;
initial begin
      reset = 1;
      clk = 0;
      #5;
      reset = 0;
      #500;
      end
      
always  begin
       clk = ~clk; #10;
       end
endmodule
## Clock signal
set_property PACKAGE_PIN W5 [get_ports clk]							
	set_property IOSTANDARD LVCMOS33 [get_ports clk]
	create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk]
	
set_property PACKAGE_PIN U18 [get_ports clk_input]						
            set_property IOSTANDARD LVCMOS33 [get_ports clk_input]
        set_property PACKAGE_PIN T18 [get_ports reset_input]                        
            set_property IOSTANDARD LVCMOS33 [get_ports reset_input]
            
set_property PACKAGE_PIN V17 [get_ports hard_reset]					
                set_property IOSTANDARD LVCMOS33 [get_ports hard_reset]


 #Leds	
set_property PACKAGE_PIN U16 [get_ports StallD]					
	set_property IOSTANDARD LVCMOS33 [get_ports StallD]
set_property PACKAGE_PIN E19 [get_ports StallF]					
	set_property IOSTANDARD LVCMOS33 [get_ports StallF]
#7 seg

set_property PACKAGE_PIN W7 [get_ports {C[6]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {C[6]}] 
set_property PACKAGE_PIN W6 [get_ports {C[5]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {C[5]}] 
set_property PACKAGE_PIN U8 [get_ports {C[4]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {C[4]}] 
set_property PACKAGE_PIN V8 [get_ports {C[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {C[3]}] 
set_property PACKAGE_PIN U5 [get_ports {C[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {C[2]}] 
set_property PACKAGE_PIN V5 [get_ports {C[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {C[1]}] 
set_property PACKAGE_PIN U7 [get_ports {C[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {C[0]}] 
set_property PACKAGE_PIN U2 [get_ports {AN[0]}] 	                 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {AN[0]}] 
set_property PACKAGE_PIN U4 [get_ports {AN[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {AN[1]}] 
set_property PACKAGE_PIN V4 [get_ports {AN[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {AN[2]}] 
set_property PACKAGE_PIN W4 [get_ports {AN[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {AN[3]}]
// External instruction memory used by MIPS single-cycle
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output


module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
      
    /*  8'h00:instr= 32'h20080007;
       8'h04:instr= 32'h20090005;
       8'h08:instr= 32'h200a0000;
       8'h0c:instr= 32'h210b000f;
       8'h10:instr= 32'h01095020;
       8'h14:instr= 32'h01095025;
       8'h18:instr= 32'h01095024;
       8'h1c:instr= 32'h01095022;
       8'h20:instr= 32'h0109502a;
       8'h24:instr= 32'had280002;
       8'h28:instr= 32'h8d090000;
       8'h2c:instr= 32'h1100fff5;
       8'h30:instr= 32'h200a000a;
       8'h34:instr= 32'h2009000c;
       */
       
       /*
       8'h00:instr= 32'h20080005;
       8'h04:instr= 32'h21090006;
       8'h08:instr= 32'h01285020;
       */
      
      /*
       8'h00:instr= 32'h20080005;
       8'h04:instr= 32'h20090006;
       8'h08:instr= 32'h20040001;
       8'h0c:instr= 32'h20050002;
       8'h10:instr= 32'had280000;
       8'h14:instr= 32'h8d090001;
       8'h18:instr= 32'h01245020;
       8'h1c:instr= 32'h01255022;
       */
       
       8'h00:instr=  32'h20090002;
       8'h04:instr=  32'h10000002;
       8'h08:instr=  32'h20090005;
       8'h0c:instr=  32'h21290006;
       8'h10:instr=  32'h20090008;
       8'h14:instr=  32'h20040000;
       8'h18:instr=  32'h20050000;
       8'h1c:instr=  32'hac090000;



	     default:  instr = {32{1'b0}};	// unknown address
	   endcase
endmodule
module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clk, reset,		// StallD will be connected as this EN
                output logic[31:0] instrD, PcPlus4D);
    
    always_ff @(posedge clk, posedge reset)begin
        if (reset)begin
            instrD <= 0;
            PcPlus4D <= 0;
        end
        else if(EN)
            begin
            instrD<=instr;
            PcPlus4D<=PcPlus4F;
            end
        else begin
            instrD <= instrD;
            PcPlus4D <= PcPlus4D;
        end
    end
endmodule

// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule
module mux4 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1, d2, d3,  
              input  logic[1:0] s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s[1] ? (s[0] ? d3 : d2) : (s[0] ? d1 : d0); 
endmodule
module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// StallF will be connected as this EN
                output logic[31:0] PCF);
    
    always_ff @(posedge clk, posedge reset)begin
        if (reset)
            PCF <= 0;
        else if(EN)
            begin
            PCF<=PC;
            end
        else 
            PCF <= PCF;
    end
endmodule
////////////////////////////////////////////////////////
//  
//  display_controller.sv
//
//  by Will Sawyer  31 March 2017
//
//  puts 4 hexadecimal values (from O to F) on the 4-digit 7-segment display unit
//     
//
//  the AN, Cx and DP outputs are active-low, for the BASYS3 board
//    AN3 is the left-most digit, AN2 is the second-left-most, etc
//    C[6] is CA for the a segment, c[5] is CB for the b segment, etc
//   
//  Uses the 100 MHz board clock for clk, and uses a clear signal for resetting
//  Takes 4 active-high enable signals, 1 per digit, to enable 
//     or disable display digits
//
//  For correct connections, carefully plan what should be in the .XDC file
//   
//  
////////////////////////////////////////////////////////

module display_controller (
		input logic clk, clear,
		input logic [3:0] enables, 
		input logic [3:0] digit3, digit2, digit1, digit0,
		output logic [3:0] AN,
		output logic [6:0] C,
		output logic       DP
		);

		logic [3:0] current_digit, cur_dig_AN;
		logic [6:0] segments;
		
      assign AN = ~(enables & cur_dig_AN);// AN signals are active low on the BASYS3 board,
                                // and must be enabled in order to display the digit
      assign C = ~segments;     // segments must be inverted, since the C values are active low
      assign DP = 1;            // makes the dot point always off 
                                // (0 = on, since it is active low)

// the 19-bit counter, runs at 100 MHz, so bit17 changes each 131072 clock cycles, 
//   or about once each 1.3 millisecond. Turning on and off the digits at this rate will
//   fool the human eye and make them appear to be on continuously
	   localparam N=19;
	   logic [N-1:0] count;
	always_ff @(posedge clk, posedge clear)
		if(clear) count <= 0;
		else count <= count + 1;	

// the upper 2 bits of count will cycle through the digits and the AN patterns
//  from left to right across the display unit			
	always_comb
	   case (count[N-1:N-2])
                // left most, AN3  
		2'b00: begin current_digit = digit3; cur_dig_AN = 4'b1000; end  
		2'b01: begin current_digit = digit2; cur_dig_AN = 4'b0100; end
		2'b10: begin current_digit = digit1; cur_dig_AN = 4'b0010; end
		2'b11: begin current_digit = digit0; cur_dig_AN = 4'b0001; end
                // right most, AN0
		default: begin current_digit = 4'bxxxx; cur_dig_AN = 4'bxxxx; end
	   endcase

// the hex-to-7-segment decoder
	always_comb
		case (current_digit)
		4'b0000: segments = 7'b111_1110;  // 0
		4'b0001: segments = 7'b011_0000;  // 1
		4'b0010: segments = 7'b110_1101;  // 2
		4'b0011: segments = 7'b111_1001;  // 3
		4'b0100: segments = 7'b011_0011;  // 4
		4'b0101: segments = 7'b101_1011;  // 5
		4'b0110: segments = 7'b101_1111;  // 6
		4'b0111: segments = 7'b111_0000;  // 7
		4'b1000: segments = 7'b111_1111;  // 8
		4'b1001: segments = 7'b111_0011;  // 9
		4'b1010: segments = 7'b111_0111;  // A
		4'b1011: segments = 7'b001_1111;  // b
		4'b1100: segments = 7'b000_1101;  // c
		4'b1101: segments = 7'b011_1101;  // d
		4'b1110: segments = 7'b100_1111;  // E
		4'b1111: segments = 7'b100_0111;  // F
		default: segments = 7'bxxx_xxxx;
		endcase		
endmodule
/////////////////////////////////////////////////////////////////////////////////
// 
//   pulse_controller.sv
// 
//   Will Sawyer on 03/31/2017
// 
//   This module takes a slide switch or pushbutton input and 
//   does the following:
//     --debounces it on both its low-to-high transition, and its high-to-low transition
//      (by ignoring any addtional changes (typical "switch bounce" for ~40 milliseconds)
//     --synchronizes it with the clock edges
//     --produces just one pulse, lasting for one clock period, for a pushed and released switch
//   
//   Note that the 40 millisecond debounce time = 4000000 cycles of 
//   100 MHz clock (which has 10 nsec period)
// 
//   CLK: the 100 MHz system clock from the BASYS3 board  
//   sw_input: the signal coming from the slide switch or pushbutton
//   clear: this debouncer takes a direct clear input to reset its state, at start-up
//   clk_pulse: the synchronized debounced single-pulse output
//
//////////////////////////////////////////////////////////////////////////////////

module pulse_controller(
	input  logic CLK, sw_input, clear,
	output logic clk_pulse );

	 logic [2:0] state, nextstate;
	 logic [20:0] CNT; 
	 logic cnt_zero; 

	always_ff @ (posedge CLK, posedge clear)
	   if(clear)
	    	state <=3'b000;
	   else
	    	state <= nextstate;

	always_comb
          case (state)
             3'b000: begin if (sw_input) nextstate = 3'b001; 
                           else nextstate = 3'b000; clk_pulse = 0; end	     
             3'b001: begin nextstate = 3'b010; clk_pulse = 1; end
             3'b010: begin if (cnt_zero) nextstate = 3'b011; 
                           else nextstate = 3'b010; clk_pulse = 0; end
             3'b011: begin if (sw_input) nextstate = 3'b011; 
                           else nextstate = 3'b100; clk_pulse = 0; end
             3'b100: begin if (cnt_zero) nextstate = 3'b000; 
                           else nextstate = 3'b100; clk_pulse = 0; end
            default: begin nextstate = 3'b000; clk_pulse = 0; end
          endcase

	always_ff @(posedge CLK)
	   case(state)
		3'b001: CNT <= 4000000;
		3'b010: CNT <= CNT-1;
		3'b011: CNT <= 4000000;
		3'b100: CNT <= CNT-1;
	   endcase

//  reduction operator |CNT gives the OR of all bits in the CNT register	
	assign cnt_zero = ~|CNT;

endmodule
